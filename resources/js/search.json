[[{"i":"powershell-niv2","l":"Powershell Niv.2","p":["Le but de cette formation de perfectionnement en Powershell est de donner les clés et les techniques pour passer d'un code \"vite-fait\" à un code:","Fiable","Robuste","Maintenable"]}],[{"l":"Construire son code"},{"l":"Tout commence par une commande","p":["On identifira rapidement une ou deux commandes qui seront le coeur de notre code.","Celles qui récupéreront l'essentiel des données souhaités ou qui feront l'action finale voulue par notre code.","L’idée est de connaitre précisément le fonctionnement de ces commandes et de savoir identifier les propriétés et les méthodes des objets renvoyés par ces commandes et ce que nous aurons à manipuler.","La construction de notre code consistera ensuite à entourer ces commandes de validations, de logique, de contrôle d'erreur et de formatage des données renvoyées"]},{"l":"Définir un squelette","p":["Les Inputs- A l'aide des paramètres, on valide, on nomme et on contrôle les entrées","Les Outputs- On définit et on structure les données qui devront être renvoyés par notre code","Les contrôles- On traite les erreurs possible, et on rends notre code assez verbeux pour faciliter son debug."]},{"l":"Si on code une fonction","p":["La fonction devra être le plus mono tâche et spécialisée possible. On doit pouvoir réutiliser cette fonction telle quelle, dans un contexte différent."]},{"l":"Si on code un script","p":["Dans le cas d'un script, l'attention doit être portée sur la factorisation du code. Si on doit répéter un bloc de code plusieurs fois dans le script, c'est que ce bout de code doit devenir une fonction."]}],[{"l":"Les paramètres"},{"l":"Options de paramètres"},{"l":"Mandatory","p":["Cette option permet de rendre un paramètre obligatoire. Si ce paramètre est oublié à l'appel du script ou de la fonction, un prompt apparaitre pour founir une valeur."]},{"l":"Position","p":["Si un position est rensignée, le script ou la fonction pourront être appelés sans préciser le nom du paramètre. La valeur des paramètres seront attribués en fonction de l'ordre dans lequelles ils ont étés renseignés.","For example, the Get-ChildItem cmdlet has Path and Exclude parameters. The Position setting for Path is 0, which means that it is a positional parameter. The Position setting for Exclude is named.","Par exemple, la commande Get-ChildItem à un paramètre Path qui une position 0. Cette commande s'exécutera donc de la même manière dans tous les cas suivant:","Dans le dernier exemple, le paramètre Exclude sera ignoré dans la position, car nommé."]},{"l":"Parameter Set Name","p":["Les ParameterSetName permette de changer le comportement du code en fonction d'un groupe de paramètre utilisé.","Les règles suivantes s'applique au ParameterSetName:","Seul un Set de paramètre peut être utilisé lors de l'appel de la fonction ou du script.","Si aucun Set est précisé, le paramètre appartient à tous les Sets.","Un paramètre peut appartenir à plusieurs Set"]},{"l":"ValueFromPipeline","p":["Ce boolean permet de définir que ce paramètre pourra prendre sa valeur depuis le pipeline"]},{"l":"ValueFromPipelineByPropertyName","p":["ValueFromPipelineByPropertyName permet de lié un paramètre à un une propriété de l'objet recu dans le pipeline par leur nom.","Les deux doivent avoir le même type. Ici dans l'exemple, la propriété Name d'un objet service est un [string] et peut donc être récupérer par le paramètre $Name de notre commande.","On peut utiliser les alias de paramètres pour faire correspondre notre paramètre à plusieurs nom de propriétés possible.","https://learn.microsoft.com/fr-fr/powershell/scripting/developer/cmdlet/validatepattern-attribute-declaration?view=powershell-7.3"]}],[{"l":"Les Guidelines"}]]